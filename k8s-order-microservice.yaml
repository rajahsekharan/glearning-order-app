apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: order-microservice-rs
  labels:
    app: order-microservice-rs
spec:
  # modify replicas according to your case
  replicas: 1
  selector:
    matchLabels:
      app: "order-microservice"
  template:
    metadata:
      labels:
        app: "order-microservice"
        env: "dev"
        version: "v1"
        tier: "backend"
    spec:        
     containers:
      - name: "order-microservice"
        image: "classpathio/order-microservice:latest"
        imagePullPolicy: IfNotPresent
        livenessProbe:
              httpGet:
                path: /actuator/health/liveness
                port: 8222
              initialDelaySeconds: 30 # 30 seconds after the container starts
              periodSeconds: 10 # 10 seconds between probes
              successThreshold: 1 # 1 success is needed to be considered healthy
              failureThreshold: 5 # 5 consecutive failures
              timeoutSeconds: 5 # 5 seconds for the probe to timeout
        env:
          - name: "SPRING_PROFILES_ACTIVE"
            value: "dev"
        volumeMounts:
          - name: "app-config"
            mountPath: "/app/config/"
            

     volumes:
      - name: "app-config"
        configMap:
          name: "order-microservice-cm"


--- 
kind: ConfigMap
apiVersion: v1
metadata:
  name: order-microservice-cm
data:
  application-dev.yaml: |-
    spring:
      datasource:
        url: jdbc:h2:mem:testdb
        username: sa
        password: welcome
        driver-class-name: org.h2.Driver
      jpa:
        hibernate:
          ddl-auto: create
        show-sql: true
        properties:
          hibernate:
            dialect: org.hibernate.dialect.H2Dialect
    server:
      port: 8222
  application-qa.yaml: |-
    spring:
      datasource:
        url: jdbc:h2:mem:testdb
        username: sa
        password: welcome
        driver-class-name: org.h2.Driver
      jpa:
        hibernate:
          ddl-auto: create
        show-sql: true
        properties:
          hibernate:
            dialect: org.hibernate.dialect.H2Dialect
    server:
      port: 8333
  application-prod.yaml: |-
    spring:
      datasource:
        url: jdbc:h2:mem:testdb
        username: sa
        password: welcome
        driver-class-name: org.h2.Driver
      jpa:
        hibernate:
          ddl-auto: create
        show-sql: true
        properties:
          hibernate:
            dialect: org.hibernate.dialect.H2Dialect
    server:
      port: 6666
--- 
apiVersion: v1
kind: Service
metadata:
  name: order-microservice-svc
spec:
  selector:
    app: order-microservice
  type: ClusterIP
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8222
